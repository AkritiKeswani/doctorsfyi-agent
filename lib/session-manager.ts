export interface PatientInfo {
  id: string
  name: string
  dateOfBirth: string
  mrn: string // Medical Record Number
  insurance?: string
}

export interface SessionData {
  id: string
  patientInfo: PatientInfo
  startTime: number
  endTime?: number
  transcription: string
  soapNote?: any
  status: "active" | "completed" | "paused"
  duration?: number
}

export class SessionManager {
  private sessions: Map<string, SessionData> = new Map()
  private currentSessionId: string | null = null

  createSession(patientInfo: PatientInfo): string {
    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const session: SessionData = {
      id: sessionId,
      patientInfo,
      startTime: Date.now(),
      transcription: "",
      status: "active",
    }

    this.sessions.set(sessionId, session)
    this.currentSessionId = sessionId

    return sessionId
  }

  getCurrentSession(): SessionData | null {
    if (!this.currentSessionId) return null
    return this.sessions.get(this.currentSessionId) || null
  }

  updateSession(sessionId: string, updates: Partial<SessionData>): void {
    const session = this.sessions.get(sessionId)
    if (session) {
      Object.assign(session, updates)
      this.sessions.set(sessionId, session)
    }
  }

  completeSession(sessionId: string): void {
    const session = this.sessions.get(sessionId)
    if (session) {
      session.status = "completed"
      session.endTime = Date.now()
      session.duration = session.endTime - session.startTime
      this.sessions.set(sessionId, session)
    }
  }

  getAllSessions(): SessionData[] {
    return Array.from(this.sessions.values()).sort((a, b) => b.startTime - a.startTime)
  }

  exportSession(sessionId: string): string {
    const session = this.sessions.get(sessionId)
    if (!session) return ""

    const duration = session.duration || Date.now() - session.startTime
    const durationMinutes = Math.round(duration / 60000)

    return `
MEDICAL TRANSCRIPTION SESSION
=============================

Patient Information:
- Name: ${session.patientInfo.name}
- MRN: ${session.patientInfo.mrn}
- DOB: ${session.patientInfo.dateOfBirth}
- Insurance: ${session.patientInfo.insurance || "Not provided"}

Session Details:
- Date: ${new Date(session.startTime).toLocaleDateString()}
- Start Time: ${new Date(session.startTime).toLocaleTimeString()}
- Duration: ${durationMinutes} minutes
- Status: ${session.status}

TRANSCRIPTION:
${session.transcription || "No transcription available"}

${
  session.soapNote
    ? `
SOAP NOTE:
==========

SUBJECTIVE:
${session.soapNote.subjective}

OBJECTIVE:
${session.soapNote.objective}

ASSESSMENT:
${session.soapNote.assessment}

PLAN:
${session.soapNote.plan}

${
  session.soapNote.medicalCoding
    ? `
MEDICAL CODES:
==============

ICD-10 Diagnostic Codes:
${session.soapNote.medicalCoding.icd10Codes
  .map(
    (code: any) =>
      `- ${code.code}: ${code.description} (${code.severity}, ${Math.round(code.confidence * 100)}% confidence)`,
  )
  .join("\n")}

CPT Procedure Codes:
${session.soapNote.medicalCoding.cptCodes
  .map((code: any) => `- ${code.code}: ${code.description} (${Math.round(code.confidence * 100)}% confidence)`)
  .join("\n")}
`
    : ""
}
`
    : ""
}

Generated by Medical Transcription AI
${new Date().toLocaleString()}
    `.trim()
  }
}

export const sessionManager = new SessionManager()
